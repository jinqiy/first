(defun single? (1st)
  (and (consp 1st) (null (cdr 1st))))
(defun appendl (1st obj)
  (append 1st (list obj)))
(defun map-int (fn n)
  (let ((ace nil))
    (dotimes (i n)
      (push (funcall fn i) ace))
    (nreverse ace)))
(defun filter (fn 1st)
  (let ((acc nil))
    (dolist (x 1st)
      (let ((val (funcall fn x)))
        (if val (push val acc))))
    (nreverse acc)))
(defun most (fn 1st)
  (if (null 1st)
    (values nil nil)
    (let* ((wins (car 1st))
          (max (funcall fn wins)))
      (dolist (obj (cdr 1st))
        (let ((score (funcall fn obj)))
          (when (> score max)
            (setf wins obj
               max score))))
      (values wins max))))

